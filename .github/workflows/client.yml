on:
  push:
    branches-ignore:
      - main
  workflow_call: {}

concurrency:
  group: client-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

name: Build client

permissions:
  contents: write

jobs:
  client:
    name: Build client
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          client:
            - 'client/**'
            - '.github/workflows/client.yml'
            - '.gitmodules'
            - 'LICENSE'
    # Reconfigure VBP version information
    - name: Add version info if this is a tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1

        $version = $env:GITHUB_REF -replace 'refs/tags/', ''
        # Remove possible v* prefix
        $version = $version -replace '^v', ''
        $version = $version -replace '^V', ''

        # Error if version is not a valid version
        if($version -notmatch '^\d+\.\d+\.\d+$') {
          throw (New-Object System.ArgumentException("Invalid version format: $version"))
        }
        # Split version
        $version = $version -split '\.'

        $vbp = Get-Content .\client\DSO.vbp
        $vbp = $vbp -replace '^MajorVer=.*$', "MajorVer=$($version[0])"
        $vbp = $vbp -replace '^MinorVer=.*$', "MinorVer=$($version[1])"
        $vbp = $vbp -replace '^RevisionVer=.*$', "RevisionVer=$($version[2])"
        $vbp | Set-Content .\client\DSO.vbp
    - name: Add git hash to the version info
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1

        $hash = git rev-parse HEAD
        $vbp = Get-Content .\client\DSO.vbp
        $vbp = $vbp -replace '^VersionComments=.*$', "VersionComments=""git-$hash"""
        $vbp = $vbp -replace '^VersionFileDescription=.*$', "VersionFileDescription=""DSO public build $hash"""
        $vbp | Set-Content .\client\DSO.vbp
    # Build process
    - name: Download VB6 from public sources and extract/install
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 5
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1

        mkdir ".\logs"
        mkdir "C:\vb6"

        function Test-FileHash {
            param (
                $FilePath,
                $ExpectedHash
            )
            $Hash = Get-FileHash -Path $FilePath -Algorithm SHA256
            if($Hash.Hash -ne $ExpectedHash) {
                throw (New-Object System.Security.Cryptography.CryptographicException("Hash mismatch for $FilePath. Expected: $ExpectedHash, got: $($Hash.Hash)"))
            }
            Write-Host "Hash OK for $FilePath"
        }

        Invoke-WebRequest -Uri "https://archive.org/download/VisualBasic6Portable/Visual%20Basic%206%20Portable.exe" -OutFile "C:\vb6\vb6_portable.exe"
        Test-FileHash -FilePath "C:\vb6\vb6_portable.exe" -ExpectedHash "11A56534505DC393BF367CD2ABB7C59036BF0C5D82444A4E26D0E77BB6717ACB"
        Invoke-WebRequest -Uri "https://altushost-swe.dl.sourceforge.net/project/vb6extendedruntime/Visual%20Basic%206.0%20Runtime%20Plus%202.2.zip" -OutFile "C:\vb6\vb6runtime.zip"
        Test-FileHash -FilePath "C:\vb6\vb6runtime.zip" -ExpectedHash "FAF15554ED7FDB20CE638BBA6126AEA4D921D1F1EA66FDD291DCD158B2D2030A"

        C:
        cd "C:\vb6"
        & "C:\Program Files\7-Zip\7z.exe" x "C:\vb6\vb6_portable.exe"
        & "C:\Program Files\7-Zip\7z.exe" x "C:\vb6\vb6runtime.zip"
        Start-Process -FilePath "C:\vb6\VB6 Runtime Plus 2.2.exe" -ArgumentList "/silent" -Wait -PassThru
        reg import "C:\vb6\AutoPlay\Docs\VbPortable6.reg"
    - name: Build client
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 1
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1

        Remove-Item -Force ".\client\dist" -Recurse -ErrorAction Continue
        mkdir ".\client\dist"
        Start-Process -FilePath "C:\vb6\AutoPlay\Docs\Portable.VB6\Vb6.exe" -ArgumentList "/make",".\client\DSO.vbp","/outdir",".\client\dist\","/out",".\logs\build.log" -Wait -PassThru
        Get-Content .\logs\build.log
        if(![System.IO.File]::Exists(".\client\dist\dso.exe")) {
          throw (New-Object System.IO.FileNotFoundException("dso.exe not found. Build failure?", $path))
        }
        cd ".\client\dist"
        Copy-Item ..\user .\ -Recurse -Force
        Copy-Item ..\libs\VbAsyncSocket\LICENSE .\LICENSE-VbAsyncSocket.txt
        Copy-Item ..\libs\VBCCR\LICENSE.md .\LICENSE-VBCCR.txt
        Copy-Item ..\libs\msvbvm60.dll .\msvbvm60.dll
        Copy-Item ..\..\LICENSE .\LICENSE.txt
        & "C:\Program Files\7-Zip\7z.exe" a -tzip "..\..\client.zip" -r * "-x!dso.pdb"
    - name: Ensure Defender doesn't false-positive us
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 2
      run: |
        $ErrorActionPreference = 'Stop'
        Remove-MpPreference -ExclusionPath (Get-MpPreference).ExclusionPath
        Set-PSDebug -Trace 1

        Remove-Item -Force "$env:TEMP\MpCmdRun.log" -ErrorAction Continue
        & "C:\Program Files\Windows Defender\MpCmdRun.exe" -SignatureUpdate -http
        Get-Content "$env:TEMP\MpCmdRun.log"

        Remove-Item -Force "$env:TEMP\MpCmdRun.log" -ErrorAction Continue
        & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File "$(pwd)\client\dist\dso.exe"
        Get-Content "$env:TEMP\MpCmdRun.log"
        if(![System.IO.File]::Exists(".\client\dist\dso.exe")) {
          throw (New-Object System.IO.FileNotFoundException("dso.exe not found. Defender likely nabbed it...", $path))
        }

        Remove-Item -Force "$env:TEMP\MpCmdRun.log" -ErrorAction Continue
        & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File "$(pwd)\client.zip"
        Get-Content "$env:TEMP\MpCmdRun.log"
        if(![System.IO.File]::Exists(".\client.zip")) {
          throw (New-Object System.IO.FileNotFoundException("client.zip not found. Defender likely nabbed it...", $path))
        }
    #  Artifact handlers
    - name: Upload build artifacts
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: client
        path: client/dist/
        if-no-files-found: error
    - name: Release mainline
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main' && steps.changes.outputs.client == 'true'
      with:
        tag_name: latest
        files: client.zip
        fail_on_unmatched_files: true
        prerelease: true
    - name: Tag Repo
      uses: richardsimko/update-tag@v1
      if: github.ref == 'refs/heads/main' && steps.changes.outputs.client == 'true'
      with:
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Release tag
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: client.zip
        fail_on_unmatched_files: true
    #  Always/Failure handlers
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: logs/
